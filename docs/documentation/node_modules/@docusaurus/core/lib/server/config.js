"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const import_fresh_1 = __importDefault(require("import-fresh"));
const lodash_has_1 = __importDefault(require("lodash.has"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../constants");
const REQUIRED_FIELDS = ['baseUrl', 'favicon', 'title', 'url'];
const OPTIONAL_FIELDS = [
    'organizationName',
    'projectName',
    'customFields',
    'githubHost',
    'plugins',
    'themes',
    'presets',
    'themeConfig',
    'scripts',
    'stylesheets',
    'tagline',
];
const DEFAULT_CONFIG = {
    plugins: [],
    themes: [],
    customFields: {},
    themeConfig: {},
};
function formatFields(fields) {
    return fields.map((field) => `'${field}'`).join(', ');
}
function loadConfig(siteDir) {
    const configPath = path_1.default.resolve(siteDir, constants_1.CONFIG_FILE_NAME);
    if (!fs_extra_1.default.existsSync(configPath)) {
        throw new Error(`${constants_1.CONFIG_FILE_NAME} not found`);
    }
    const loadedConfig = import_fresh_1.default(configPath);
    const missingFields = REQUIRED_FIELDS.filter((field) => !lodash_has_1.default(loadedConfig, field));
    if (missingFields.length > 0) {
        throw new Error(`The required field(s) ${formatFields(missingFields)} are missing from ${constants_1.CONFIG_FILE_NAME}`);
    }
    // Merge default config with loaded config.
    const config = Object.assign(Object.assign({}, DEFAULT_CONFIG), loadedConfig);
    // Don't allow unrecognized fields.
    const allowedFields = [...REQUIRED_FIELDS, ...OPTIONAL_FIELDS];
    const unrecognizedFields = Object.keys(config).filter((field) => !allowedFields.includes(field));
    if (unrecognizedFields && unrecognizedFields.length > 0) {
        throw new Error(`The field(s) ${formatFields(unrecognizedFields)} are not recognized in ${constants_1.CONFIG_FILE_NAME}.
If you still want these fields to be in your configuration, put them in the 'customFields' attribute.
See https://v2.docusaurus.io/docs/docusaurus.config.js/#customfields`);
    }
    return config;
}
exports.loadConfig = loadConfig;
