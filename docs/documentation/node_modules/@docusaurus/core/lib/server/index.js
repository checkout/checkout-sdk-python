"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@docusaurus/utils");
const path_1 = __importDefault(require("path"));
const constants_1 = require("../constants");
const client_modules_1 = require("./client-modules");
const config_1 = require("./config");
const plugins_1 = require("./plugins");
const presets_1 = require("./presets");
const routes_1 = require("./routes");
const themes_1 = require("./themes");
const html_tags_1 = require("./html-tags");
function loadContext(siteDir, customOutDir) {
    const generatedFilesDir = path_1.default.resolve(siteDir, constants_1.GENERATED_FILES_DIR_NAME);
    const siteConfig = config_1.loadConfig(siteDir);
    const outDir = customOutDir
        ? path_1.default.resolve(customOutDir)
        : path_1.default.resolve(siteDir, constants_1.BUILD_DIR_NAME);
    const { baseUrl } = siteConfig;
    return {
        siteDir,
        generatedFilesDir,
        siteConfig,
        outDir,
        baseUrl,
    };
}
exports.loadContext = loadContext;
function loadPluginConfigs(context) {
    const { plugins: presetPlugins, themes: presetThemes } = presets_1.loadPresets(context);
    const { siteConfig } = context;
    return [
        ...presetPlugins,
        ...presetThemes,
        // Site config should be the highest priority.
        ...(siteConfig.plugins || []),
        ...(siteConfig.themes || []),
    ];
}
exports.loadPluginConfigs = loadPluginConfigs;
async function load(siteDir, customOutDir) {
    // Context.
    const context = loadContext(siteDir, customOutDir);
    const { generatedFilesDir, siteConfig, outDir, baseUrl } = context;
    const genSiteConfig = utils_1.generate(generatedFilesDir, constants_1.CONFIG_FILE_NAME, `export default ${JSON.stringify(siteConfig, null, 2)};`);
    // Plugins.
    const pluginConfigs = loadPluginConfigs(context);
    const { plugins, pluginsRouteConfigs } = await plugins_1.loadPlugins({
        pluginConfigs,
        context,
    });
    // Themes.
    const fallbackTheme = path_1.default.resolve(__dirname, '../client/theme-fallback');
    const pluginThemes = [].concat(...plugins
        .map((plugin) => plugin.getThemePath && plugin.getThemePath())
        .filter(Boolean));
    const userTheme = path_1.default.resolve(siteDir, constants_1.THEME_PATH);
    const alias = themes_1.loadThemeAlias([fallbackTheme, ...pluginThemes], [userTheme]);
    // Make a fake plugin to:
    // - Resolve aliased theme components
    // - Inject scripts/stylesheets
    const { stylesheets = [], scripts = [] } = siteConfig;
    plugins.push({
        name: 'docusaurus-bootstrap-plugin',
        configureWebpack: () => ({
            resolve: {
                alias,
            },
        }),
        injectHtmlTags: () => {
            const stylesheetsTags = stylesheets.map((source) => typeof source === 'string'
                ? `<link rel="stylesheet" href="${source}">`
                : {
                    tagName: 'link',
                    attributes: Object.assign({ rel: 'stylesheet' }, source),
                });
            const scriptsTags = scripts.map((source) => typeof source === 'string'
                ? `<script type="text/javascript" src="${source}"></script>`
                : {
                    tagName: 'script',
                    attributes: Object.assign({ type: 'text/javascript' }, source),
                });
            return {
                headTags: [...stylesheetsTags, ...scriptsTags],
            };
        },
    });
    // Load client modules.
    const clientModules = client_modules_1.loadClientModules(plugins);
    const genClientModules = utils_1.generate(generatedFilesDir, 'client-modules.js', `export default [\n${clientModules
        // import() is async so we use require() because client modules can have
        // CSS and the order matters for loading CSS.
        // We need to JSON.stringify so that if its on windows, backslash are escaped.
        .map((module) => `  require(${JSON.stringify(module)}),`)
        .join('\n')}\n];\n`);
    // Load extra head & body html tags.
    const { headTags, preBodyTags, postBodyTags } = html_tags_1.loadHtmlTags(plugins);
    // Routing.
    const { registry, routesChunkNames, routesConfig, routesPaths, } = await routes_1.loadRoutes(pluginsRouteConfigs, baseUrl);
    const genRegistry = utils_1.generate(generatedFilesDir, 'registry.js', `export default {
${Object.keys(registry)
        .sort()
        .map((key) => 
    // We need to JSON.stringify so that if its on windows, backslash are escaped.
    `  '${key}': [${registry[key].loader}, ${JSON.stringify(registry[key].modulePath)}, require.resolveWeak(${JSON.stringify(registry[key].modulePath)})],`)
        .join('\n')}};\n`);
    const genRoutesChunkNames = utils_1.generate(generatedFilesDir, 'routesChunkNames.json', JSON.stringify(routesChunkNames, null, 2));
    const genRoutes = utils_1.generate(generatedFilesDir, 'routes.js', routesConfig);
    await Promise.all([
        genClientModules,
        genSiteConfig,
        genRegistry,
        genRoutesChunkNames,
        genRoutes,
    ]);
    const props = {
        siteConfig,
        siteDir,
        outDir,
        baseUrl,
        generatedFilesDir,
        routesPaths,
        plugins,
        headTags,
        preBodyTags,
        postBodyTags,
    };
    return props;
}
exports.load = load;
